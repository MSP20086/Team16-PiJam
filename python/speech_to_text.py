# -*- coding: utf-8 -*-
"""AudioModels.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16d1_iXILAiLcL_DxufSV98VCw890oBZG
"""

import torch
import librosa
import numpy as np
from transformers import AutoModelForSpeechSeq2Seq, AutoProcessor, pipeline

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
device_idx = 0 if torch.cuda.is_available() else -1

model_id = "openai/whisper-tiny.en"
asr_model = AutoModelForSpeechSeq2Seq.from_pretrained(model_id).to(device)
processor = AutoProcessor.from_pretrained(model_id)

asr_pipe = pipeline(
    "automatic-speech-recognition",
    model=asr_model,
    tokenizer=processor.tokenizer,
    feature_extractor=processor.feature_extractor,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device=device_idx,
)

def transcribe_audio(audio_path, chunk_duration=30):
    audio, sr = librosa.load(audio_path, sr=16000)
    samples_per_chunk = chunk_duration * sr
    num_chunks = int(np.ceil(len(audio) / samples_per_chunk))
    chunks = [
        audio[i * samples_per_chunk: (i + 1) * samples_per_chunk]
        for i in range(num_chunks)
    ]
    results = asr_pipe(chunks)
    transcript = " ".join(result["text"] for result in results)
    return transcript

if __name__ == "__main__":
    audio_file = "/content/MBp11.mp3"
    print("ðŸŽ¤ Transcribing audio...")
    transcript = transcribe_audio(audio_file)
    print("Transcript:")
    print(transcript)